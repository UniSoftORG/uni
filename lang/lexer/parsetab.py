
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programCOLON COMMA EQUALS GEN_ELEMENT GEN_END LBRACKET LCURLY LPAREN NUMBER RBRACKET RCURLY RPAREN STATE STRING TEXT VARIABLEprogram : program gen_element\n    | gen_elementstatements : statements statement\n    | statementgen_element : GEN_ELEMENT LPAREN gen_params RPAREN COLON statements GEN_ENDgen_params : gen_params COMMA gen_param\n    | gen_paramgen_param : TEXT COLON valuestatement : VARIABLE TEXT EQUALS itemstatement : STATE TEXT EQUALS itemitem : object\n    | list\n    | NUMBER\n    | STRINGobject : LCURLY keyvalues RCURLYlist : LBRACKET items RBRACKETitems : items COMMA item\n    | item\n    |keyvalues : keyvalues COMMA keyvalue\n    | keyvalue\n    |keyvalue : TEXT COLON valuevalue : STRING\n    | object\n    | NUMBER'
    
_lr_action_items = {'GEN_ELEMENT':([0,1,2,4,26,],[3,3,-2,-1,-5,]),'$end':([1,2,4,26,],[0,-2,-1,-5,]),'LPAREN':([3,],[5,]),'TEXT':([5,10,18,21,22,31,],[8,8,25,28,29,25,]),'RPAREN':([6,7,13,14,15,16,17,30,],[9,-7,-6,-8,-24,-25,-26,-15,]),'COMMA':([6,7,13,14,15,16,17,18,23,24,30,35,36,38,39,40,41,42,44,45,46,48,],[10,-7,-6,-8,-24,-25,-26,-22,31,-21,-15,-20,-23,-11,-12,-13,-14,-19,47,-18,-16,-17,]),'COLON':([8,9,25,],[11,12,32,]),'STRING':([11,32,33,34,42,47,],[15,15,41,41,41,41,]),'NUMBER':([11,32,33,34,42,47,],[17,17,40,40,40,40,]),'LCURLY':([11,32,33,34,42,47,],[18,18,18,18,18,18,]),'VARIABLE':([12,19,20,27,30,37,38,39,40,41,43,46,],[21,21,-4,-3,-15,-9,-11,-12,-13,-14,-10,-16,]),'STATE':([12,19,20,27,30,37,38,39,40,41,43,46,],[22,22,-4,-3,-15,-9,-11,-12,-13,-14,-10,-16,]),'RCURLY':([15,16,17,18,23,24,30,35,36,],[-24,-25,-26,-22,30,-21,-15,-20,-23,]),'GEN_END':([19,20,27,30,37,38,39,40,41,43,46,],[26,-4,-3,-15,-9,-11,-12,-13,-14,-10,-16,]),'EQUALS':([28,29,],[33,34,]),'RBRACKET':([30,38,39,40,41,42,44,45,46,48,],[-15,-11,-12,-13,-14,-19,46,-18,-16,-17,]),'LBRACKET':([33,34,42,47,],[42,42,42,42,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'gen_element':([0,1,],[2,4,]),'gen_params':([5,],[6,]),'gen_param':([5,10,],[7,13,]),'value':([11,32,],[14,36,]),'object':([11,32,33,34,42,47,],[16,16,38,38,38,38,]),'statements':([12,],[19,]),'statement':([12,19,],[20,27,]),'keyvalues':([18,],[23,]),'keyvalue':([18,31,],[24,35,]),'item':([33,34,42,47,],[37,43,45,48,]),'list':([33,34,42,47,],[39,39,39,39,]),'items':([42,],[44,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program gen_element','program',2,'p_program','rules.py',6),
  ('program -> gen_element','program',1,'p_program','rules.py',7),
  ('statements -> statements statement','statements',2,'p_statements','rules.py',15),
  ('statements -> statement','statements',1,'p_statements','rules.py',16),
  ('gen_element -> GEN_ELEMENT LPAREN gen_params RPAREN COLON statements GEN_END','gen_element',7,'p_gen_element','rules.py',32),
  ('gen_params -> gen_params COMMA gen_param','gen_params',3,'p_gen_params','rules.py',44),
  ('gen_params -> gen_param','gen_params',1,'p_gen_params','rules.py',45),
  ('gen_param -> TEXT COLON value','gen_param',3,'p_gen_param','rules.py',53),
  ('statement -> VARIABLE TEXT EQUALS item','statement',4,'p_statement_variable','rules.py',58),
  ('statement -> STATE TEXT EQUALS item','statement',4,'p_statement_state','rules.py',63),
  ('item -> object','item',1,'p_item','rules.py',68),
  ('item -> list','item',1,'p_item','rules.py',69),
  ('item -> NUMBER','item',1,'p_item','rules.py',70),
  ('item -> STRING','item',1,'p_item','rules.py',71),
  ('object -> LCURLY keyvalues RCURLY','object',3,'p_object','rules.py',76),
  ('list -> LBRACKET items RBRACKET','list',3,'p_list','rules.py',81),
  ('items -> items COMMA item','items',3,'p_items','rules.py',86),
  ('items -> item','items',1,'p_items','rules.py',87),
  ('items -> <empty>','items',0,'p_items','rules.py',88),
  ('keyvalues -> keyvalues COMMA keyvalue','keyvalues',3,'p_keyvalues','rules.py',98),
  ('keyvalues -> keyvalue','keyvalues',1,'p_keyvalues','rules.py',99),
  ('keyvalues -> <empty>','keyvalues',0,'p_keyvalues','rules.py',100),
  ('keyvalue -> TEXT COLON value','keyvalue',3,'p_keyvalue','rules.py',110),
  ('value -> STRING','value',1,'p_value','rules.py',115),
  ('value -> object','value',1,'p_value','rules.py',116),
  ('value -> NUMBER','value',1,'p_value','rules.py',117),
]
